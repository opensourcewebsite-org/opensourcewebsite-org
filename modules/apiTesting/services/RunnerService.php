<?php

namespace app\modules\apiTesting\services;

use app\modules\apiTesting\models\ApiTestJob;
use app\modules\apiTesting\models\ApiTestRequest;
use app\modules\apiTesting\models\ApiTestRunner;
use app\modules\apiTesting\models\ApiTestServer;
use app\modules\apiTesting\services\networking\Requester;
use yii\base\Component;
use yii\db\Expression;

/**
 * Class RunnerService
 *
 * @package app\modules\apiTesting\services
 * @property Requester $requester
 */
class RunnerService extends Component
{
    private $requester;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->requester = new Requester();
    }

    public function runActualQueue()
    {
        foreach ($this->getActualQueueQuery()->batch() as $queueChunk) {
            /** @var $queueChunk ApiTestRunner[] */
            foreach ($queueChunk as $queueItem) {
                //Если верификация не пройдена, то пропускаем запрос
                $queueItem->status = $queueItem::STATUS_IN_PROGRESS;
                $queueItem->save();
                try {
                    if ($queueItem->isJob()) {
                        $this->runJob($queueItem->job);
                    } elseif ($queueItem->isRequest()) {
                        if ($queueItem->request->server->domain->status == ApiTestServer::STATUS_VERIFICATION_PROGRESS) {
                            $queueItem->status = $queueItem::STATUS_WAITING;
                            $queueItem->save();
                            continue;
                        }

                        $this->runRequest($queueItem->request);
                    }
                } catch (\Exception $exception) {
                    $queueItem->status = $queueItem::STATUS_FAILED;
                    $queueItem->save();
                    continue;
                }

                $queueItem->timing = time();

                if ($queueItem->isJob()) {
                    $queueItem->status = $queueItem::STATUS_SUCCESS;
                } else {
                    $queueItem->status = $queueItem->request->latestResponse->code == $queueItem->request->correct_response_code ? $queueItem::STATUS_SUCCESS : $queueItem::STATUS_FAILED;
                }

                $queueItem->save();
            }
        }
    }

    /**
     * @return \app\modules\apiTesting\models\ApiTestRunnerQuery
     */
    private function getActualQueueQuery()
    {
        return ApiTestRunner::find()
            ->andWhere([
                'status' => ApiTestRunner::STATUS_WAITING,
            ])
            ->andWhere(['<=', 'start_at', new Expression('NOW()')]);
    }

    private function runJob(ApiTestJob $job)
    {
        foreach ($job->requests as $request) {
            $this->runRequest($request, $job);
        }
    }

    private function runRequest(ApiTestRequest $request, ApiTestJob $byJob = null)
    {
        $this->requester->makeRequest($request, $byJob);
        return true;
    }
}
