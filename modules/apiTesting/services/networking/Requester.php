<?php

namespace app\modules\apiTesting\services\networking;

use app\modules\apiTesting\models\ApiTestJob;
use app\modules\apiTesting\models\ApiTestJobSchedule;
use app\modules\apiTesting\models\ApiTestRequest;
use app\modules\apiTesting\models\ApiTestResponse;
use yii\base\Component;
use yii\base\Exception;
use yii\httpclient\Client;

/**
 * Class Requester
 *
 * @package app\modules\apiTesting\services\networking
 * @property Client $httpClient
 */
class Requester extends Component
{
    private $httpClient;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->httpClient = new Client();
    }

    public function makeRequest(ApiTestRequest $request, ApiTestJob $job = null)
    {
        $requestStartTime = hrtime(true);

        $response = $this->httpClient
            ->createRequest()
            ->setHeaders($this->prepareHeaders($request))
            ->setMethod($request->getMethodString())
            ->setData($request->body)
            ->setUrl($request->getFullUrl())
            ->send();

        $requestEndTime = hrtime(true);
        $requestTime = ($requestEndTime - $requestStartTime);
        $requestTime = \Yii::$app->formatter->asInteger($requestTime / 1e+6);
        $responseModel = new ApiTestResponse([
            'request_id' => $request->id,
            'body' => $response->getContent(),
            'time' => $requestTime,
            'headers' => json_encode($response->getHeaders()),
            'cookies' => json_encode($response->getCookies()),
            'code' => $response->getStatusCode(),
            'size' => strlen($response->getContent()),
        ]);

        if ($job) {
            $responseModel->job_id = $job->id;
        }

        $responseModel->save();

        if ($request->expected_response_body) {
            if (json_decode($request->expected_response_body) != json_decode($responseModel->body)) {
                throw new Exception('Responses are not equal');
            }
        }
    }

    private function getClientFormatByRequestFormat(ApiTestRequest $model)
    {
        switch ($model->content_type):
            case $model::CONTENT_TYPE_HTML:
                return Client::FORMAT_RAW_URLENCODED;
        case $model::CONTENT_TYPE_JSON:
                return Client::FORMAT_JSON;
        case $model::CONTENT_TYPE_XML:
                return Client::FORMAT_XML;
        default:
                return Client::FORMAT_URLENCODED;
        endswitch;
    }

    private function prepareHeaders(ApiTestRequest $request)
    {
        $result = [
            'Content-type' => $request->content_type
        ];

        foreach ($request->apiTestRequestHeaders as $header) {
            $result[$header->key] = $header->value;
        }

        return $result;
    }
}
