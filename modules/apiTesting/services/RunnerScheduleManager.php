<?php

namespace app\modules\apiTesting\services;

use app\modules\apiTesting\models\ApiTestJobSchedule;
use app\modules\apiTesting\models\ApiTestRunner;
use yii\base\Component;
use yii\db\Expression;

/**
 * Class RunnerScheduleManager
 *
 * @property RunnerQueueService $runnerQueueService
 */
class RunnerScheduleManager extends Component
{
    const INTERVAL_TODAY = '1 DAY';
    const INTERVAL_WEEK = '1 WEEK';
    const INTERVAL_MONTH = '1 MONTH';
    const INTERVAL_YEAR = '1 YEAR';

    private $runnerQueueService;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->runnerQueueService = new RunnerQueueService();
    }

    public function addScheduledJobsToRunner()
    {
        $schedulesForAddToRunner = [
            ApiTestJobSchedule::find()->activeByCustomSchedule()->batch(),
            ApiTestJobSchedule::find()->activeByEverydaySchedule()->batch(),
            ApiTestJobSchedule::find()->activeByEveryMonthSchedule()->batch(),
            ApiTestJobSchedule::find()->activeByEveryWeekSchedule()->batch(),
        ];

        foreach ($schedulesForAddToRunner as $schedules) {
            foreach ($schedules as $scheduleChunk) {
                /** @var ApiTestJobSchedule $schedule */
                foreach ($scheduleChunk as $schedule) {
                    $this->runnerQueueService->addJobToQueueBySchedule($schedule);
                }
            }
        }
    }

    public static function getScheduleIdsThatAlreadyInRunnerByInterval($interval)
    {
        return  ApiTestRunner::find()->andWhere([
            '>',
            'from_unixtime(start_at,\'%Y-%m-%d\')',
            new Expression('DATE_SUB(NOW(), INTERVAL '.$interval.')')
        ])
            ->select('triggered_by_schedule')
            ->column();
    }
}
