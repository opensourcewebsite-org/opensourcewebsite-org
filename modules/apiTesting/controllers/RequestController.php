<?php

namespace app\modules\apiTesting\controllers;

use app\modules\apiTesting\models\ApiTestProject;
use app\modules\apiTesting\models\ApiTestRequest;
use app\modules\apiTesting\models\ApiTestRequestSearch;
use app\modules\apiTesting\models\ApiTestServer;
use app\modules\apiTesting\services\RequestService;
use app\modules\apiTesting\services\RunnerQueueService;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * RequestController implements the CRUD actions for ApiTestRequest model.
 * @property RequestService $requestService
 * @property RunnerQueueService $runnerQueueService
 */
class RequestController extends Controller
{
    private $requestService;
    private $runnerQueueService;

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->requestService = new RequestService();
        $this->runnerQueueService = new RunnerQueueService();
    }

    public function actionLabelsManage($id)
    {
        $model = $this->findModel($id);

        if (Yii::$app->request->isPost && $model->load(Yii::$app->request->post()) && $this->requestService->update($model)) {
            $this->redirect(['/apiTesting/project/testing', 'id' => $model->server->project_id]);
        }

        return $this->renderAjax('labels_manage', [
            'model' => $model,
        ]);
    }

    /**
     * Displays a single ApiTestRequest model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new ApiTestRequest model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($id)
    {
        $model = new ApiTestRequest();
        $project = $this->findProject($id);
        if ($model->load(Yii::$app->request->post()) && $this->requestService->save($model)) {
            return $this->redirect(['update', 'id' => $model->id]);
        }
        return $this->render('create', [
            'model' => $model,
            'project' => $project
        ]);
    }

    /**
     * Updates an existing ApiTestRequest model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($model->load(Yii::$app->request->post()) && $this->requestService->update($model)) {
            return $this->redirect(['view', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing ApiTestRequest model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $model = $this->findModel($id);
        $project = $model->server->project;
        $model->delete();

        return $this->redirect(['/apiTesting/project/testing', 'id' => $project->id]);
    }

    public function actionRun($id)
    {
        $request = $this->findModel($id);
        $this->runnerQueueService->addRequestToQueue($request);
        $this->redirect(['/apiTesting/runner', 'id' => $request->server->project_id]);
    }

    /**
     * Finds the ApiTestRequest model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return ApiTestRequest the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = ApiTestRequest::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    private function findProject($id)
    {
        $project = ApiTestProject::find()->my()->andWhere(['id' => $id])->one();
        if ( ! $project) {
            throw new NotFoundHttpException();
        }
        return $project;
    }
}
