<?php

namespace app\modules\apiTesting\controllers;

use app\modules\apiTesting\models\ApiTestProject;
use app\modules\apiTesting\models\ApiTestRequestLabel;
use app\modules\apiTesting\models\ApiTestServer;
use app\modules\apiTesting\models\ApiTestServerSearch;
use app\modules\apiTesting\services\ServerService;
use Yii;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * ServerController implements the CRUD actions for ApiTestServer model.
 * @property ServerService $serverService
 */
class ServerController extends Controller
{
    private $serverService;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->serverService = new ServerService();
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all ApiTestServer models.
     * @return mixed
     */
    public function actionIndex($id)
    {
        $project = $this->findProject($id);

        $searchModel = new ApiTestServerSearch();
        $dataProvider = $searchModel->search([
            $searchModel->formName() => [
                'project_id' => $id
            ]
        ]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'project' => $project
        ]);
    }

    /**
     * Creates a new ApiTestServer model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate($id)
    {
        $this->serverService->generateTxtKey();
        $project = $this->findProject($id);
        $model = new ApiTestServer([
            'project_id' => $id,
            'txt' => $this->serverService->getLatestTxtKey()
        ]);

        if (Yii::$app->request->isPost && $model->load(Yii::$app->request->post()) && $this->serverService->createServer($model)) {
            return $this->redirect(['/apiTesting/server', 'id' => $project->id]);
        }

        return $this->render('create', [
            'model' => $model,
            'project' => $project,
        ]);
    }

    /**
     * Updates an existing ApiTestServer model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if (Yii::$app->request->isPost && $model->load(Yii::$app->request->post()) && $model->save()) {
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing ApiTestServer model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the ApiTestServer model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return ApiTestServer the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = ApiTestServer::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    private function findProject($id)
    {
        $project = ApiTestProject::find()->my()->andWhere(['id' => $id])->one();
        if ( ! $project) {
            throw new NotFoundHttpException();
        }
        return $project;
    }
}
