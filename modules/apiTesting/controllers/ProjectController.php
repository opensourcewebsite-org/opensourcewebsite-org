<?php

namespace app\modules\apiTesting\controllers;

use app\models\Setting;
use app\modules\apiTesting\models\ApiTestLabel;
use app\modules\apiTesting\models\ApiTestProject;
use app\modules\apiTesting\models\ApiTestProjectSearch;
use app\modules\apiTesting\models\ApiTestRequest;
use app\modules\apiTesting\services\ProjectService;
use app\modules\apiTesting\services\ProjectTeamService;
use Yii;
use yii\data\ActiveDataProvider;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

/**
 * ProjectController implements the CRUD actions for ApiTestProject model.
 * @property ProjectService $projectService
 * @property ProjectTeamService $projectTeamService
 */
class ProjectController extends Controller
{
    private $projectService;
    private $projectTeamService;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->projectService = new ProjectService();
        $this->projectTeamService = new ProjectTeamService();
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ];
    }

    /**
     * Lists all ApiTestProject models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new ApiTestProjectSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $dataProvider->query->orderBy('id DESC');
        $dataProvider->sort = false;

        $setting = Setting::findOne(['key' => 'api_tester_project_quantity_value_per_one_rating']);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'projectQtyRate' => $setting->value
        ]);
    }

    /**
     * Creates a new ApiTestProject model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new ApiTestProject();

        if ($this->projectService->save($model, Yii::$app->request->post())) {
            return $this->redirect(['/apiTesting/team/index', 'id' => $model->id]);
        }

        return $this->render('create', [
            'model' => $model,
        ]);
    }

    /**
     * Updates an existing ApiTestProject model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = $this->findModel($id);

        if ($this->projectService->save($model, Yii::$app->request->post())) {
            return $this->redirect(['testing', 'id' => $model->id]);
        }

        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing ApiTestProject model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
    }

    public function actionTesting($id)
    {
        $project = $this->findModel($id);
        $labels = $project->labels;

        $labels[] = new ApiTestLabel([
            'name' => 'Without labels'
        ]);

        $requestsDataProvidersByLabelId = [];

        foreach ($labels as $label) {
            if ($label->id == null) {
                $requestsDataProvidersByLabelId[$label->id] = new ActiveDataProvider([
                    'query' => ApiTestRequest::find()->andWhere(['server_id' => $project->getServers()->select('id')->column()])
                        ->joinWith(['responses', 'labels l'])
                        ->andWhere(['IS', 'l.id', null])
                        ->andFilterWhere(['like', ApiTestRequest::tableName().'.name', Yii::$app->request->get('q')])
                        ->groupBy(ApiTestRequest::tableName().'.id'),
                    'id' => 'label-dp-'.$label->id,
                ]);
            } else {
                $requestsDataProvidersByLabelId[$label->id] = new ActiveDataProvider([
                    'query' => $label->getRequests()
                        ->joinWith('responses')
                        ->andFilterWhere(['like', ApiTestRequest::tableName().'.name', Yii::$app->request->get('q')])
                        ->groupBy(ApiTestRequest::tableName().'.id'),
                    'id' => 'label-dp-'.$label->id,
                ]);
            }
        }
        return $this->render('testing', [
            'project' => $project,
            'labels' => $labels,
            'requestsDataProvidersByLabelId' => $requestsDataProvidersByLabelId
        ]);
    }

    /**
     * Finds the ApiTestProject model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return ApiTestProject the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    private function findModel($id)
    {
        $project = ApiTestProject::find()->my()->andWhere(['id' => $id])->one();
        if ( ! $project) {
            throw new NotFoundHttpException();
        }
        return $project;
    }
}
